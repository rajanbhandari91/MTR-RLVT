



% Calculate masses that are "on top"
% These masses will not move if the fuselage is shifted
M1 = sum([...
    Vehicle.Geom.RWing.Mass, ...
    Vehicle.Geom.LWing.Mass, ...
    Vehicle.Geom.LHTail.Mass, ...
    Vehicle.Geom.RHTail.Mass, ...
    Vehicle.Geom.Left_VS.Mass, ...
    Vehicle.Geom.Right_VS.Mass, ...
    Vehicle.Geom.L_OBD_Boom.Mass, ...
    Vehicle.Geom.R_OBD_Boom.Mass, ...
    Vehicle.Geom.L_IBD_Boom.Mass, ...
    Vehicle.Geom.R_IBD_Boom.Mass, ...
    Vehicle.Geom.Rotor_1.Mass, ...
    Vehicle.Geom.Rotor_2.Mass, ...
    Vehicle.Geom.Rotor_3.Mass, ...
    Vehicle.Geom.Rotor_4.Mass, ...
    Vehicle.Geom.Rotor_5.Mass, ...
    Vehicle.Geom.Rotor_6.Mass, ...
    Vehicle.Geom.Rotor_7.Mass, ...
    Vehicle.Geom.Rotor_8.Mass, ...
    Vehicle.Geom.LiftMotors.Mass, ...
    Vehicle.Geom.Power_Cabling.Mass ...
    Vehicle.Geom.Fuel.Mass]);


% Calculated masses that are "below"
% These masses will move if the fuselage is shifted
M2 = Vehicle.MassProp.MTOM_kg - M1;


% on even executions, update the fuselage reference point:
if(mod(Vehicle.Tracker.GeomUpdaterRuns,2)==0)
    % Suppose we want to move the overall CG by dXcg by moving the CG of M2 by
    % dX2. These quantities are related as follows:
    % dX2 = (M1 + M2) * dXcg / M2
    dXcg = - (Vehicle.MassProp.CG(1) - Vehicle.MassProp.TargetCG(1));
    dX2 = (M1 + M2) * dXcg / M2;
    Vehicle.Geom.Fus.RefPtLocation(1) = Vehicle.Geom.Fus.RefPtLocation(1) + dX2;

    fprintf('\n Current CG-x %0.4f \n',  Vehicle.MassProp.CG(1))
end

